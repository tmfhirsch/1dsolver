"""Redefined CG, returns 0 for unphysical (j·µ¢,m·µ¢) combination (instead of error)"""
function clebschgordan_lax(j‚ÇÅ,m‚ÇÅ,j‚ÇÇ,m‚ÇÇ,j‚ÇÉ,m‚ÇÉ=m‚ÇÅ+m‚ÇÇ)
    for (j·µ¢,m·µ¢) in ((j‚ÇÅ, m‚ÇÅ), (j‚ÇÇ, m‚ÇÇ), (j‚ÇÉ, m‚ÇÉ))
        if !WignerSymbols.œµ(j·µ¢,m·µ¢) # unphysical j·µ¢,m·µ¢ entered
            return 0::Int
        end
    end
    return clebschgordan(j‚ÇÅ,m‚ÇÅ,j‚ÇÇ,m‚ÇÇ,j‚ÇÉ,m‚ÇÉ) # if all good, send on to CG calc
end

# Œæ factor (Cocks et al (2019) equation (7))
const Œº_ratio = 1.00115965 # ratio of e‚Åª mag mom to Bohr magneton (Cocks 2019)
const Œ±_fs = 0.0072973525693 # fine structure constant (Wikipedia)
const Œæ = Œ±_fs^2 * Œº_ratio^2 * 1.0u"hartree*bohr^3"

################################################################################
# My code - super slow w/ huge memory allocations.

"""Asymmetrised |a‚ÇÅ‚ÇÇ‚ü© states ÃÇH_sd
    Input: ‚ü®a‚ÇÅ‚ÇÇ'|, |a‚ÇÅ‚ÇÇ‚ü©, R~[L]
    Output: ‚ü®a‚ÇÅ‚ÇÇ'|ÃÇH_sd|a‚ÇÅ‚ÇÇ‚ü©(R) ~ [E]
    Based off eqn at end of 2.4.3 in my Thesis (23/08/20)"""
function H_sd_asym(bra::a12_ket, ket::a12_ket, R)
    # unpack quantum numbers
    S‚ÇÅ_, i‚ÇÅ_, f‚ÇÅ_ = bra.Œì.Œ±‚ÇÅ.S, bra.Œì.Œ±‚ÇÅ.i, bra.Œì.Œ±‚ÇÅ.f
    S‚ÇÅ, i‚ÇÅ, f‚ÇÅ = ket.Œì.Œ±‚ÇÅ.S, ket.Œì.Œ±‚ÇÅ.i, ket.Œì.Œ±‚ÇÅ.f
    S‚ÇÇ_, i‚ÇÇ_, f‚ÇÇ_ = bra.Œì.Œ±‚ÇÇ.S, bra.Œì.Œ±‚ÇÇ.i, bra.Œì.Œ±‚ÇÇ.f
    S‚ÇÇ, i‚ÇÇ, f‚ÇÇ = ket.Œì.Œ±‚ÇÇ.S, ket.Œì.Œ±‚ÇÇ.i, ket.Œì.Œ±‚ÇÇ.f
    f_, l_, J_, mJ_ = bra.f, bra.l, bra.J, bra.mJ
    f, l, J, mJ = ket.f, ket.l, ket.J, ket.mJ
    # Œî(i‚ÇÅ,i‚ÇÇ)
    (i‚ÇÅ_==i‚ÇÅ && i‚ÇÇ_==i‚ÇÇ) || return 0.0u"hartree"
    result=sqrt((2*f‚ÇÅ_+1)*(2*f‚ÇÇ_+1)*(2*f‚ÇÅ+1)*(2*f‚ÇÇ+1))
    mfml_sum = 0
    for mf_ in -f_:1:f_, ml_ in -l_:1:l_, mf in -f:1:f, ml in -l:1:l
        mfml_term = clebschgordan_lax(f_,mf_,l_,ml_,J_,mJ_)
        mfml_term*= clebschgordan_lax(f,mf,l,ml,J,mJ)
        Si_sum = 0
        for S_ in abs(S‚ÇÅ_-S‚ÇÇ_):1:(S‚ÇÅ_+S‚ÇÇ_), S in abs(S‚ÇÅ-S‚ÇÇ):1:(S‚ÇÅ+S‚ÇÇ), i in abs(i‚ÇÅ-i‚ÇÇ):1:(i‚ÇÅ+i‚ÇÇ)
            Si_term = sqrt((2*S_+1)*(2*S+1))
            Si_term*= 2*i+1
            Si_term*= wigner9j(S‚ÇÅ_,S‚ÇÇ_,S_,i‚ÇÅ,i‚ÇÇ,i,f‚ÇÅ_,f‚ÇÇ_,f_)
            Si_term*= wigner9j(S‚ÇÅ,S‚ÇÇ,S,i‚ÇÅ,i‚ÇÇ,i,f‚ÇÅ,f‚ÇÇ,f)
            mSmi_sum = 0
            for mS_ in -S_:1:S_, mS in -S:1:S, mi in -i:1:i
                mSmi_term = clebschgordan_lax(S_,mS_,i,mi,f_,mf_)
                mSmi_term = clebschgordan_lax(S,mS,i,mi,f,mf)
                bra_Œ± = Œ±_ket(S‚ÇÅ_,S‚ÇÇ_,S_,mS_,l_,ml_)
                ket_Œ± = Œ±_ket(S‚ÇÅ,S‚ÇÇ,S,mS,l,ml)
                mSmi_term*= H_sd_Œ±(bra_Œ±,ket_Œ±,R)
                mSmi_sum += mSmi_term
            end
            Si_term *= mSmi_sum
            Si_sum += Si_term
        end
        mfml_term *= Si_sum
        mfml_sum += mfml_term
    end
    result *= mfml_sum
    return (-15*Œæ/R^3)*result
end

"""Asymmetrised |Œ±‚ü© states ÃÇH_sd
    Input: ‚ü®Œ±'|, |Œ±‚ü©, R~[L]
    Output: ‚ü®a‚ÇÅ‚ÇÇ'|ÃÇH_sd|a‚ÇÅ‚ÇÇ‚ü©(R) ~ [E]"""
function H_sd_Œ±(bra::Œ±_ket, ket::Œ±_ket, R)
    # unpack quantum numbers
    S‚ÇÅ_, S‚ÇÇ_, S_, mS_, l_, ml_ = bra.S‚ÇÅ, bra.S‚ÇÇ, bra.S, bra.mS, bra.l, bra.ml
    S‚ÇÅ, S‚ÇÇ, S, mS, l, ml = ket.S‚ÇÅ, ket.S‚ÇÇ, ket.S, ket.mS, ket.l, ket.ml
    #Œî‚Çõ‚ÇÅ‚Çõ‚ÇÇ factor
    (S‚ÇÅ==S‚ÇÅ_ && S‚ÇÇ==S‚ÇÇ_) || return 0
    # Sum over rotated frame angular momenta
    Œ©sum=0
    for Œ©‚Çõ in max(-S,-S_):1:min(S,S_), Œ©‚ÇÅ in -S‚ÇÅ:1:S‚ÇÅ, Œ©‚ÇÇ in -S‚ÇÇ:1:S‚ÇÇ
        term = clebschgordan_lax(l_,0,2,0,l,0)
        term *= clebschgordan_lax(l_,ml_,2,mS_-mS,l,ml)
        term *= clebschgordan_lax(S,mS,2,mS_-mS,S_,mS_)
        term *= clebschgordan_lax(S,Œ©‚Çõ,2,0,S_,Œ©‚Çõ)
        term *= Œ©‚ÇÅ*Œ©‚ÇÇ
        term *= clebschgordan_lax(S‚ÇÅ,Œ©‚ÇÅ,S‚ÇÇ,Œ©‚ÇÇ,S_,Œ©‚Çõ)
        term *= clebschgordan_lax(S‚ÇÅ,Œ©‚ÇÅ,S‚ÇÇ,Œ©‚ÇÇ,S,Œ©‚Çõ)
        Œ©sum += term
    end
    return (1/(2*S_+1))*sqrt((2l_+1)/(2l+1))*Œ©sum
end

################################################################################
# Scheme from Cocks et al. (2019). Coded up by me. Simpler than my monstrosity.

""" ‚ü®Œ≥',S'|ùêì¬≤|Œ≥,S‚ü©/ƒß¬≤ from (36) in Cocks et al (2019)
    Inputs: Œ≥'={S1',S2'}, S', Œ≥={S1,S2}, S
    Outputs: ‚ü®Œ≥',S'|ùêì¬≤|Œ≥,S‚ü©/ƒß¬≤
    Tested for Œ≥=(1,1) against ¬∂ below (37) in Cocks (2019) 10/08/20"""
function TTensor(Œ≥_,S_,Œ≥,S)
    S1_, S2_ = Œ≥_[1], Œ≥_[2]
    S1, S2 = Œ≥[1], Œ≥[2]
    Œ≥_ == Œ≥ || return 0 #Œ¥·µß_·µß
    x = sqrt(5*S1*(S1+1)*S2*(S2+1))
    x*= sqrt((2*S1+1)*(2*S2+1)*(2*S+1))
    x*= wigner9j(S1,S2,S,1,1,2,S1,S2,S_)
    return x
end

"""Coupling coefficients for *symmetrised* states ÃÇH_sd
    Input: ‚ü®a'|, |a‚ü©, R~[L]
    Output: ‚ü®a'|ÃÇH_sd|a‚ü©(R)/V‚Çö(R)"""
function H_sd_coeffs(bra::a_ket,ket::a_ket)
    return asymmetric_eval(H_sd_a12_coeffs, bra, ket, nothing)
end

""" Coupling coefficients of the symmetrised |a‚ÇÅ‚ÇÇ‚ü© states ÃÇH_sd.
    Input: ‚ü®a‚ÇÅ‚ÇÇ'|, |a‚ÇÅ‚ÇÇ‚ü©, R~[L]
    Output: ‚ü®a‚ÇÅ‚ÇÇ'|ÃÇH_sd|a‚ÇÅ‚ÇÇ‚ü©/V‚Çö(R) ~ 1
    Based off Cocks et al (2019) eqn (39)"""
function H_sd_a12_coeffs(bra::a12_ket, ket::a12_ket)
    # unpack quantum numbers
    S‚ÇÅ_, i‚ÇÅ_, f‚ÇÅ_ = bra.Œì.Œ±‚ÇÅ.S, bra.Œì.Œ±‚ÇÅ.i, bra.Œì.Œ±‚ÇÅ.f
    S‚ÇÅ, i‚ÇÅ, f‚ÇÅ = ket.Œì.Œ±‚ÇÅ.S, ket.Œì.Œ±‚ÇÅ.i, ket.Œì.Œ±‚ÇÅ.f
    S‚ÇÇ_, i‚ÇÇ_, f‚ÇÇ_ = bra.Œì.Œ±‚ÇÇ.S, bra.Œì.Œ±‚ÇÇ.i, bra.Œì.Œ±‚ÇÇ.f
    S‚ÇÇ, i‚ÇÇ, f‚ÇÇ = ket.Œì.Œ±‚ÇÇ.S, ket.Œì.Œ±‚ÇÇ.i, ket.Œì.Œ±‚ÇÇ.f
    f_, l_, J_, mJ_ = bra.f, bra.l, bra.J, bra.mJ
    f, l, J, mJ = ket.f, ket.l, ket.J, ket.mJ
    # ŒîŒª
    (S‚ÇÅ_==S‚ÇÅ && S‚ÇÇ_==S‚ÇÇ && i‚ÇÅ_==i‚ÇÅ && i‚ÇÇ_==i‚ÇÇ && J_==J && mJ==mJ) || return 0
    # D‚Çê‚ÇÅ‚ÇÇ‚Çã‚Çê‚ÇÅ‚ÇÇ
    result=(-1)^(l_+J)
    result*=sqrt((2*f‚ÇÅ_+1)*(2*f‚ÇÇ_+1)*(2*f_+1)
                 *(2*f‚ÇÅ+1)*(2*f‚ÇÇ+1)*(2*f+1)
                 *(2*l_+1))
    result*=sqrt((2*l+1)/(2*l_+1))*clebschgordan_lax(l,0,2,l_,0)
    result*=wigner6j(f,2,f_,l_,J,l)
    Si_sum=0
    for S_ in abs(S‚ÇÅ_-S‚ÇÇ_):1:(S‚ÇÅ_+S‚ÇÇ_), S in abs(S‚ÇÅ-S‚ÇÇ):1:(S‚ÇÅ+S‚ÇÇ), i in abs(i‚ÇÅ-i‚ÇÇ):1:(i‚ÇÅ+i‚ÇÇ)
        Si_term=(-1)^(-S_-i)
        Si_term*=(2*S_+1)*(2*i+1)
        Si_term*=sqrt(2*S+1)
        Si_term*=wigner6j(f,2,f_,S_,i,S)
        Si_term*=TTensor((S‚ÇÅ_,S‚ÇÇ_),S_, (S‚ÇÅ,S‚ÇÇ),S)
        Si_term*=wigner9j(S‚ÇÅ,S‚ÇÇ,S_,i‚ÇÅ,i‚ÇÇ,i,f‚ÇÅ_,f‚ÇÇ_,f_)
        Si_term*=wigner9j(S‚ÇÅ,S‚ÇÇ,S,i‚ÇÅ,i‚ÇÇ,i,f‚ÇÅ,f‚ÇÇ,f)
        Si_sum += Si_term
    end
    result*=Si_sum
    return result
end

""" Radial factor in H_sd, V‚Çö(R)
    Input: R~[L]
    Output: V‚Çö(R)~[E]
    Based off Cocks et al (2019) eqn (39)"""
function H_sd_radial(R)
    # radial factor
    b=-sqrt(6)*Œæ # ƒß‚Åª¬≤ not written since it cancels with the TTensor factor
    V‚Çö=b/R^3
    return V‚Çö
end
