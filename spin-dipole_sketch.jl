#= Comparing my H_sd coupling scheme with the coupling scheme of Cocks
et al. (2019)=#
push!(LOAD_PATH,raw"C:\Users\hirsc\OneDrive - Australian National University\PHYS4110\Code\1dsolver")

using WignerSymbols, Wigner9j

"""Structure to hold quantum numbers of the form
    |S‚ÇÅ S‚ÇÇ S mS l ml ‚ü©
    Initialise by entering the numbers in that order"""
mutable struct Œ±
    S‚ÇÅ :: Int
    S‚ÇÇ :: Int
    S :: Int
    mS :: Int
    l :: Int
    ml :: Int
end

"""Redefined CG, returns 0 for unphysical (j·µ¢,m·µ¢) combination (instead of error)"""
function clebschgordan_lax(j‚ÇÅ,m‚ÇÅ,j‚ÇÇ,m‚ÇÇ,j‚ÇÉ,m‚ÇÉ=m‚ÇÅ+m‚ÇÇ)
    for (j·µ¢,m·µ¢) in ((j‚ÇÅ, m‚ÇÅ), (j‚ÇÇ, m‚ÇÇ), (j‚ÇÉ, m‚ÇÉ))
        if !WignerSymbols.œµ(j·µ¢,m·µ¢) # unphysical j·µ¢,m·µ¢ entered
            return 0::Int
        end
    end
    return clebschgordan(j‚ÇÅ,m‚ÇÅ,j‚ÇÇ,m‚ÇÇ,j‚ÇÉ,m‚ÇÉ) # if all good, send on to CG calc
end



"""My coupling scheme, current as of 4/8/20.
    Inputs: Œ±',Œ±
    Outputs: ‚ü®Œ±'|ÃÇHsd|Œ±'‚ü©√ó(-R^3/Œæ)
    Checked IN AGREEMENT WITH COCKS (2019) after making changes # 10/8
"""
function my_scheme(Œ±_::Œ±, Œ±::Œ±)
    #unpack quantum numbers
    S‚ÇÅ_,S‚ÇÇ_,S_,mS_,l_,ml_=Œ±_.S‚ÇÅ,Œ±_.S‚ÇÇ,Œ±_.S,Œ±_.mS,Œ±_.l,Œ±_.ml
    S‚ÇÅ, S‚ÇÇ, S, mS, l, ml = Œ±.S‚ÇÅ, Œ±.S‚ÇÇ, Œ±.S, Œ±.mS, Œ±.l, Œ±.ml
    #Œî‚Çõ‚ÇÅ‚Çõ‚ÇÇ factor
    (S‚ÇÅ==S‚ÇÅ_ && S‚ÇÇ==S‚ÇÇ_) || return 0
    # First, coupling term
    Œ©sum=0
    for Œ©‚Çõ in max(-S,-S_):1:min(S,S_), Œ©‚ÇÅ in -S‚ÇÅ:1:S‚ÇÅ, Œ©‚ÇÇ in -S‚ÇÇ:1:S‚ÇÇ # outer sum
        # evaluate ‚àëC innermost sum
        Csum=0
        for C in abs(S-S_):1:(S+S_) # inner sum
            Cterm = (2C+1)
            Cterm *= clebschgordan_lax(l_,0,C,0,l,0)
            Cterm *= clebschgordan_lax(l_,ml_,C,mS_-mS,l,ml)
            Cterm *= clebschgordan_lax(S,mS,C,mS_-mS,S_,mS_)
            Cterm *= clebschgordan_lax(S,Œ©‚Çõ,C,0,S_,Œ©‚Çõ)
            Csum += Cterm
        end
        term = Œ©‚ÇÅ*Œ©‚ÇÇ
        term *= clebschgordan_lax(S‚ÇÅ,Œ©‚ÇÅ,S‚ÇÇ,Œ©‚ÇÇ,S_,Œ©‚Çõ)
        term *= clebschgordan_lax(S‚ÇÅ,Œ©‚ÇÅ,S‚ÇÇ,Œ©‚ÇÇ,S,Œ©‚Çõ)
        term *= Csum
        Œ©sum += term
    end
    coupling_term=Œ©sum*3/(2*S_+1)*sqrt((2l_+1)/(2l+1))
    # Second, diagonal term
    if S != S_ || mS != mS_ || l != l_ || ml != ml_
        diag_term = 0
    else
        diag_term = -0.5*(S*(S+1)-S‚ÇÅ*(S‚ÇÅ+1)-S‚ÇÇ*(S‚ÇÇ+1))
    end
    return (coupling_term + diag_term)
end

""" ‚ü®Œ≥',S'|ùêì¬≤|Œ≥,S‚ü©/ƒß¬≤ from (36) in Cocks et al (2019)
    Inputs: Œ≥'={S1',S2'}, S', Œ≥={S1,S2}, S
    Outputs: ‚ü®Œ≥',S'|ùêì¬≤|Œ≥,S‚ü©/ƒß¬≤
    Tested for Œ≥=(1,1) against ¬∂ below (37) in Cocks (2019) 10/08/20"""
function TTensor(Œ≥_,S_,Œ≥,S)
    S1_, S2_ = Œ≥_[1], Œ≥_[2]
    S1, S2 = Œ≥[1], Œ≥[2]
    Œ≥_ == Œ≥ || return 0 #Œ¥·µß_·µß
    x = sqrt(5*S1*(S1+1)*S2*(S2+1))
    x*= sqrt((2*S1+1)*(2*S2+1)*(2*S+1))
    x*= wigner9j(S1,S2,S,1,1,2,S1,S2,S_)
    return x
end

""" Coupling scheme from Cocks et al. (2019)
    Inputs: (Œ±', Œ±) quantum numbers in that order
    Outputs: ‚àö6/ƒß^2 *D‚Çê‚Çê_ as defined in (35) from the paper
"""
function cocks2019_scheme(Œ±_::Œ±, Œ±::Œ±)
    #unpack quantum numbers
    S‚ÇÅ_,S‚ÇÇ_,S_,mS_,l_,ml_=Œ±_.S‚ÇÅ,Œ±_.S‚ÇÇ,Œ±_.S,Œ±_.mS,Œ±_.l,Œ±_.ml
    S‚ÇÅ, S‚ÇÇ, S, mS, l, ml = Œ±.S‚ÇÅ, Œ±.S‚ÇÇ, Œ±.S, Œ±.mS, Œ±.l, Œ±.ml
    #Œ¥(m‚Çõ_+m‚Çó_,m‚Çõ+m‚Çó) factor
    if mS_+ml_ != mS+ml
        return 0
    end
    eval=(-1)^(mS_-mS) #(-1)^(m‚Çõ‚Çã-m‚Çõ) factor
    eval *= clebschgordan_lax(S,mS,2,mS_-mS,S_,mS_)
    eval *= clebschgordan_lax(l,ml,2,ml_-ml,l_,ml_)
    eval *= TTensor((S‚ÇÅ_,S‚ÇÇ_),S_, (S‚ÇÅ,S‚ÇÇ),S)
    eval *= sqrt((2*l+1)/(2*l_+1))*clebschgordan_lax(l,0,2,0,l_,0)
    return sqrt(6)*eval
end

""" Exhaustive tester of my ÃÇHsd scheme vs Cocks (2019), over all possible |Œ±‚ü©
    If there is disagreement beyond <tol> for any bra/ket combination, that
    combination will be returned."""
function exhaustive_tester(lmax=4::Int,tol=1e-10)
    S‚ÇÅ, S‚ÇÇ = 1, 1 # He* atoms have spins of 1
    for S in abs(S‚ÇÅ-S‚ÇÇ):1:(S‚ÇÅ+S‚ÇÇ)
        for mS in -S:1:S
            for l in 0:1:lmax
                for ml in -l:1:l
                    ket=Œ±(S‚ÇÅ,S‚ÇÇ,S,mS,l,ml) # define ket
                    # now iterate over all possible bras
                    for S_ in abs(S‚ÇÅ-S‚ÇÇ):1:(S‚ÇÅ+S‚ÇÇ)
                        for mS_ in -S_:1:S_
                            for l_ in 0:1:lmax
                                for ml_ in -l_:1:l_
                                    bra=Œ±(S‚ÇÅ,S‚ÇÇ,S_,mS_,l_,ml_) # define bra
                                    # test and compare
                                    if abs(my_scheme(bra,ket)-cocks2019_scheme(bra,ket))>tol
                                        return "Fail for: ", bra, ket
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end
    # success!
    println("All in agreement! l up to $lmax")
end
